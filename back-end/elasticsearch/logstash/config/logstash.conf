input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/bin/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    # jdbc_connection_string => "jdbc:postgresql://host.docker.internal:5432/salesync_record_service"
    # jdbc_user => "postgres"
    # jdbc_password => "admin"
    jdbc_connection_string => "jdbc:postgresql://34.124.201.136:5432/test_record_service"
    jdbc_user => "postgres"
    jdbc_password => "Cv\QDV?@J_QQR~Y="
    statement => "SELECT r.record_id, r.name, r.user_id, r.company_name, p.record_type_property_id, p.name as property_name, p.item_value,
    p.record_type_property_label
      FROM record r
      LEFT JOIN record_type_property p ON r.record_id = p.record_id
      "
    schedule => "* * * * *"
    jdbc_fetch_size => 1000000
  }
}

filter{

  # Aggregate the records to form nested objects
  aggregate {
    task_id => "%{record_id}"
    code => "
      map['record_id'] = event.get('record_id')
      map['name'] = event.get('name')
      map['user_id'] = event.get('user_id')
      map['company_name'] = event.get('company_name')
      map['properties'] ||= []
      if(event.get('record_type_property_id') != nil)
        map['properties'] << {
          'property_id' => event.get('record_type_property_id'),
          'property_name' => event.get('property_name'),
          'item_value' => event.get('item_value'),
          'property_label' => event.get('record_type_property_label')
        }
      end
      event.cancel()
    "
    push_previous_map_as_event => true
    timeout => 1000
    timeout_task_id_field => "record_id"
  }
}
output{
  stdout { codec => json_lines }
  elasticsearch{
      hosts => ["http://elasticsearch:9200"]
      index => "records"
      document_id => "%{record_id}"
    }
}
